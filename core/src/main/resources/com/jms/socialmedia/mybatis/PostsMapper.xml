<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jms.socialmedia.mybatis.PostsMapper">
    
    <sql id="retrievePosts">
		select posts.post_id as post_id, posts.user_id as user_id, full_name, username, 
        profile_picture_link, posts.text as text, posts.timestamp as timestamp
        from posts
        inner join users
        on posts.user_id = users.user_id
    </sql>

    <select id="getNumberOfPosts" resultType="int">
        select count(1) from posts
    </select>
    
    <select id="getPost" parameterType="int" resultType="post">
        <include refid="retrievePosts"></include>
        where post_id = #{id}
    </select>
    
    <select id="getPosts" resultType="post">
        <include refid="retrievePosts"></include>
        
        <if test="tag != null">
        	inner join post_tags
        	on posts.post_id = post_tags.post_id
        </if>
        
        <where>
	        <if test="userIds != null and !userIds.isEmpty()">
	        	posts.user_id in
	        	<foreach item="userId" collection="userIds" open="(" separator="," close=")">
	        		#{userId}
	        	</foreach>
	        </if>
	        <if test="usernames != null">
	        	AND lower(username) in 
	        	<foreach item="username" collection="usernames" open="(" separator="," close=")">
	        		lower(#{username})
	        	</foreach>
	        </if>
	        <if test="tag != null">
	        	AND post_tags.tag = lower(#{tag})
	        </if>
	        <if test="onDate != null">
	        	<if test="_databaseId == 'oracle'">
	        		AND TO_CHAR(timestamp, 'MM-DD-YYYY') = #{onDate}
	        	</if>
	        	<if test="_databaseId != 'oracle'">
	        		AND DATE_FORMAT(timestamp, '%m-%d-%Y') = #{onDate}
	        	</if>
	        </if>
	        <if test="beforeDate != null">
	        	<if test="_databaseId == 'oracle'">
	        		AND (TO_DATE(#{beforeDate}, 'MM-DD-YYYY') + INTERVAL '1' DAY) >= timestamp
	        	</if>
	        	<if test="_databaseId == 'mysql'">
	        		AND DATE_ADD(STR_TO_DATE(#{beforeDate}, '%m-%d-%Y'), INTERVAL 1 DAY) >= timestamp
	        	</if>
	        </if>
	        <if test="afterDate != null">
	        	<if test="_databaseId == 'oracle'">
	        		AND timestamp >= TO_DATE(#{afterDate}, 'MM-DD-YYYY')
	        	</if>
	        	<if test="_databaseId == 'mysql'">
	        		AND timestamp >= STR_TO_DATE(#{afterDate}, '%m-%d-%Y')
	        	</if>
	        </if>
	        <if test="sincePostId != null">
	        	AND post_id > #{sincePostId}
	        </if>
        </where>

        order by 
        <choose>
        	<when test="sortBy == 'postId'">
        		post_id
        	</when>
        	<when test="sortBy == 'userId'">
        		user_id
        	</when>
        	<when test="sortBy == 'username'">
        		username
        	</when>
        	<when test="sortBy == 'fullName'">
        		full_name
        	</when>
        	<when test="sortBy == 'text'">
        		text
        	</when>
        	<when test="sortBy == 'timestamp'">
        		timestamp
        	</when>
        	<otherwise>
        		post_id
        	</otherwise>
        </choose>
        <if test="sortOrderAsc == false">desc</if>
        
    </select>

	<select id="getUserIdFromPostId" parameterType="int" resultType="Integer">
        select user_id from posts
        where post_id = #{id}
    </select>
    
    <insert id="addPost" parameterType="post" databaseId="oracle" keyColumn="post_id">
    	<selectKey keyProperty="postId" resultType="int" order="BEFORE">
    		select POSTS_SEQ.nextval as postId from DUAL
    	</selectKey>
        insert into posts (post_id, user_id, text, timestamp) values (
            #{postId}, #{userId}, #{text}, systimestamp
        )
    </insert>

	<insert id="addPost" parameterType="post" keyProperty="postId" keyColumn="post_id">
        insert into posts (user_id, text, timestamp) values (
            #{userId}, #{text}, now()
        )
    </insert>

    <update id="editPost">
        update posts
        set text = #{text}
        where post_id = #{id}
    </update>

    <delete id="deletePost" parameterType="int">
        delete from posts
        where post_id = #{id}
    </delete>

	<select id="getLikedPostsByUserId" parameterType="int" resultType="post">
		<include refid="retrievePosts"></include>
		inner join post_likes
		on posts.post_id = post_likes.post_id
		where post_likes.user_id = #{id}
		order by post_likes.timestamp desc
	</select>

	<select id="getPostLikes" parameterType="int" resultType="String">
		select username from users inner join post_likes
		on users.user_id = post_likes.user_id
		where post_id = #{id}
	</select>

	<insert id="likePost" databaseId="oracle">
		insert into post_likes (post_id, timestamp, user_id) values (
            #{postId}, systimestamp, 
            <include refid="getUserIdForLikeAndUnlike"></include>
        )
	</insert>

	<insert id="likePost">
		insert into post_likes (post_id, timestamp, user_id) values (
            #{postId}, now(),
            <include refid="getUserIdForLikeAndUnlike"></include>
        )
	</insert>

	<delete id="unlikePost">
        delete from post_likes
        where post_id = #{postId} and user_id = 
        <include refid="getUserIdForLikeAndUnlike"></include>
    </delete>

    <select id="getCommentedPostsByUserId" parameterType="int" resultType="post">
		<include refid="retrievePosts"></include>
		inner join comments
		on posts.post_id = comments.post_id
		where comments.user_id = #{id}
		order by comments.timestamp desc
	</select>

	<sql id="getUserIdForLikeAndUnlike">
		<if test="username != null">
        	(select user_id from users where lower(username) = lower(#{username}))
        </if>
        <if test="username == null">
        	#{userId}
        </if>
	</sql>

</mapper>