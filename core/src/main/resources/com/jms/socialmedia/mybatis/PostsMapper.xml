<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.jms.socialmedia.mybatis.PostsMapper">
    
    <sql id="retrievePosts">
		select posts.post_id as post_id, posts.user_id as user_id, full_name, username, 
        profile_picture_link, text, timestamp
        from posts, users    
    </sql>

    <select id="getNumberOfPosts" resultType="int">
        select count(1) from posts
    </select>
    
    <select id="getPost" parameterType="int" resultType="fullpost">
        <include refid="retrievePosts"></include>
        where post_id = #{id} and posts.user_id = users.user_id
    </select>
    
    <select id="getPosts" resultType="post">
        <include refid="retrievePosts"></include>
        
        <if test="tag != null">
        , posts_tags
        </if>
        
        WHERE posts.user_id = users.user_id
        
        <if test="userIds != null and !userIds.isEmpty()">
        	AND posts.user_id in
        	<foreach item="userId" collection="userIds" open="(" separator="," close=")">
        		#{userId}
        	</foreach>
        </if>
        <if test="username != null">
        	AND username = #{username}
        </if>
        <if test="tag != null">
        	AND posts.post_id = posts_tags.post_id AND posts_tags.tag = #{tag}
        </if>
        <if test="onDate != null">
        	AND TO_CHAR(post_timestamp, 'MM-DD-YYYY') = #{onDate}
        </if>
        <if test="beforeDate != null">
        	AND (TO_DATE(#{beforeDate}, 'MM-DD-YYYY') + INTERVAL '1' DAY) >= post_timestamp
        </if>
        <if test="afterDate != null">
        	AND post_timestamp >= TO_DATE(#{afterDate}, 'MM-DD-YYYY') 
        </if>
        order by timestamp desc
    </select>

	<select id="getUserIdFromPostId" parameterType="int" resultType="Integer">
        select user_id from posts
        where post_id = #{id}
    </select>
    
    <insert id="addPost" parameterType="post" keyColumn="post_id">
    	<selectKey keyProperty="postId" resultType="int" order="BEFORE">
    		select POSTS_SEQ.nextval as postId from DUAL
    	</selectKey>
        insert into posts (post_id, user_id, text, timestamp) values (
            #{postId}, #{userId}, #{text}, systimestamp
        )
    </insert>

    <update id="editPost">
        update posts
        set text = #{text}
        where post_id = #{id}
    </update>

    <delete id="deletePost" parameterType="int">
        delete from posts
        where post_id = #{id}
    </delete>

	<select id="getLikedPostsByUserId" parameterType="int" resultType="post">
		<include refid="retrievePosts"></include>
		, posts_likes
		where posts.post_id = posts_likes.post_id
		and posts_likes.user_id = #{id}
	</select>

	<select id="getPostLikes" parameterType="int" resultType="Integer">
		select user_id from posts_likes
		where post_id = #{id}
	</select>

	<insert id="likePost">
		insert into posts_likes (post_id, user_id, timestamp) values (
            #{postId}, #{userId}, systimestamp
        )
	</insert>

	<delete id="unlikePost">
        delete from posts_likes
        where post_id = #{postId} and user_id = #{userId}
    </delete>

    <select id="getCommentedPostsByUserId" parameterType="int" resultType="post">
		<include refid="retrievePosts"></include>
		where posts.post_id in (
			select distinct comments.post_id from comments
			where comments.user_id = #{id}
		)

	</select>

</mapper>